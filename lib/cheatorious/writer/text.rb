# encoding: UTF-8

module Cheatorious
  module Writer
    class Text
      def initialize
        @section_stack = []
        @result        = ""
        @query         = nil
        @options       = {}
      end

      def header(name, author = "", version = "", description = "")
        line
        line "-" * 80
        line "#{name} (#{version})"
        line
        line "Author     : #{author[0]} (#{author[1]})"
        line "Description: #{description}"
        line "-" * 80
        line
      end

      def search_header(query, results_count, options)
        @query = query
        @options = options
        search_type = options.keys.join(", ")
        search_type += " " if search_type.size > 0
        line
        line "Your #{search_type}search for '#{query}' returned #{results_count} #{results_count > 1 ? "results" : "result"}:" if results_count != 0
        line "Your #{search_type}search for '#{query}' doesn't returned any result. Try with another keyword." if results_count == 0
        line
      end

      def footer
        line
        line "-" * 80
        line "generated by Cheatorious (https://github.com/lfcipriani/cheatorious)"
      end

      def section_start(section)
        @section_stack.push(section)
        section = paint(section,@query) if @query && @options['section']
        line indentation("-") + " #{section}"
      end

      def section_end
        @section_stack.pop
      end

      def entry(name, *values)
        value_text = values.join(", ")
        if @options['reverse']
          value_text = paint(value_text,@query) if @query
        elsif !@options['section']
          name = paint(name,@query) if @query
        end
        e = "#{indentation(" ")} #{name}: "
        e << value_text
        line e
      end

      def result
        @result
      end

    private

      def line(str = "")
        @result += str + "\n"
      end

      def indentation(char)
        char * 2 * @section_stack.size
      end

      def paint(string, query)
        string.gsub(regex_for(query)) {|q| q.foreground(:yellow)}
      end

      def regex_for(query)
        Regexp.new(Regexp.escape(query), (@options['sensitive'] ? 0 : Regexp::IGNORECASE))
      end
    end
  end
end
